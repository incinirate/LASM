-- *** NOTE *** This list must be kept sorted so it can be binary searched --

local opcodes, codes = {}, {}
local I32, I64, F32, F64 = 1, 2, 3, 4
local NONE, VUI1, VUI3, VUI6, VSI3, VSI6 = 0, 10, 11, 12, 13, 14
local VF32, VF64 = 15, 16
local BLOC, BRTB = 7, 17
local CALI, MEMI = 18, 19

local function mkOp(tResult, tParam1, tParam2, im, memorySize, opcode, enumName, textName)
  opcodes[enumName] = {
    opcode = opcode,
    enumName = enumName,
    textName = textName,
    memorySize = memorySize,
    resultType = tResult,
    params = {tParam1, tParam2},
    paramCount = (tParam1 and 1 or 0) + (tParam2 and 1 or 0),
    immediate = im
  }

  codes[opcode] = opcodes[enumName]
end

--[[
 *     tr: result type
 *     t1: type of the 1st parameter
 *     t2: type of the 2nd parameter
 *      m: memory size of the operation, if any
 *   code: opcode
 *   Name: used to generate the opcode enum
 *   text: a string of the opcode name in the text format
 *
 *   tr    t1    t2    im    m   code  Name text
 * ================================================================================= ]]
mkOp(___,  ___,  ___, NONE,  0,  0x00, "Unreachable", "unreachable")
mkOp(___,  ___,  ___, NONE,  0,  0x01, "Nop", "nop")
mkOp(___,  ___,  ___, BLOC,  0,  0x02, "Block", "block")
mkOp(___,  ___,  ___, BLOC,  0,  0x03, "Loop", "loop")
mkOp(___,  ___,  ___, BLOC,  0,  0x04, "If", "if")
mkOp(___,  ___,  ___, NONE,  0,  0x05, "Else", "else")
mkOp(___,  ___,  ___, NONE,  0,  0x06, "Try", "try")
mkOp(___,  ___,  ___, NONE,  0,  0x07, "Catch", "catch")
mkOp(___,  ___,  ___, NONE,  0,  0x08, "Throw", "throw")
mkOp(___,  ___,  ___, NONE,  0,  0x09, "Rethrow", "rethrow")
mkOp(___,  ___,  ___, NONE,  0,  0x0a, "IfExcept", "if_except")
mkOp(___,  ___,  ___, NONE,  0,  0x0b, "End", "end")
mkOp(___,  ___,  ___, VUI3,  0,  0x0c, "Br", "br")
mkOp(___,  ___,  ___, VUI3,  0,  0x0d, "BrIf", "br_if")
mkOp(___,  ___,  ___, BRTB,  0,  0x0e, "BrTable", "br_table")
mkOp(___,  ___,  ___, NONE,  0,  0x0f, "Return", "return")
mkOp(___,  ___,  ___, VUI3,  0,  0x10, "Call", "call")
mkOp(___,  ___,  ___, CALI,  0,  0x11, "CallIndirect", "call_indirect")
mkOp(___,  ___,  ___, VUI3,  0,  0x12, "ReturnCall", "return_call")
mkOp(___,  ___,  ___, CALI,  0,  0x13, "ReturnCallIndirect", "return_call_indirect")
mkOp(___,  ___,  ___, NONE,  0,  0x1a, "Drop", "drop")
mkOp(___,  ___,  ___, NONE,  0,  0x1b, "Select", "select")
mkOp(___,  ___,  ___, VUI3,  0,  0x20, "GetLocal", "get_local")
mkOp(___,  ___,  ___, VUI3,  0,  0x21, "SetLocal", "set_local")
mkOp(___,  ___,  ___, VUI3,  0,  0x22, "TeeLocal", "tee_local")
mkOp(___,  ___,  ___, VUI3,  0,  0x23, "GetGlobal", "get_global")
mkOp(___,  ___,  ___, VUI3,  0,  0x24, "SetGlobal", "set_global")
mkOp(I32,  I32,  ___, MEMI,  4,  0x28, "I32Load", "i32.load")
mkOp(I64,  I32,  ___, MEMI,  8,  0x29, "I64Load", "i64.load")
mkOp(F32,  I32,  ___, MEMI,  4,  0x2a, "F32Load", "f32.load")
mkOp(F64,  I32,  ___, MEMI,  8,  0x2b, "F64Load", "f64.load")
mkOp(I32,  I32,  ___, MEMI,  1,  0x2c, "I32Load8S", "i32.load8_s")
mkOp(I32,  I32,  ___, MEMI,  1,  0x2d, "I32Load8U", "i32.load8_u")
mkOp(I32,  I32,  ___, MEMI,  2,  0x2e, "I32Load16S", "i32.load16_s")
mkOp(I32,  I32,  ___, MEMI,  2,  0x2f, "I32Load16U", "i32.load16_u")
mkOp(I64,  I32,  ___, MEMI,  1,  0x30, "I64Load8S", "i64.load8_s")
mkOp(I64,  I32,  ___, MEMI,  1,  0x31, "I64Load8U", "i64.load8_u")
mkOp(I64,  I32,  ___, MEMI,  2,  0x32, "I64Load16S", "i64.load16_s")
mkOp(I64,  I32,  ___, MEMI,  2,  0x33, "I64Load16U", "i64.load16_u")
mkOp(I64,  I32,  ___, MEMI,  4,  0x34, "I64Load32S", "i64.load32_s")
mkOp(I64,  I32,  ___, MEMI,  4,  0x35, "I64Load32U", "i64.load32_u")
mkOp(___,  I32,  I32, MEMI,  4,  0x36, "I32Store", "i32.store")
mkOp(___,  I32,  I64, MEMI,  8,  0x37, "I64Store", "i64.store")
mkOp(___,  I32,  F32, MEMI,  4,  0x38, "F32Store", "f32.store")
mkOp(___,  I32,  F64, MEMI,  8,  0x39, "F64Store", "f64.store")
mkOp(___,  I32,  I32, MEMI,  1,  0x3a, "I32Store8", "i32.store8")
mkOp(___,  I32,  I32, MEMI,  2,  0x3b, "I32Store16", "i32.store16")
mkOp(___,  I32,  I64, MEMI,  1,  0x3c, "I64Store8", "i64.store8")
mkOp(___,  I32,  I64, MEMI,  2,  0x3d, "I64Store16", "i64.store16")
mkOp(___,  I32,  I64, MEMI,  4,  0x3e, "I64Store32", "i64.store32")
mkOp(I32,  ___,  ___, VUI1,  0,  0x3f, "MemorySize", "memory.size")
mkOp(I32,  I32,  ___, VUI1,  0,  0x40, "MemoryGrow", "memory.grow")
mkOp(I32,  ___,  ___, VSI3,  0,  0x41, "I32Const", "i32.const")
mkOp(I64,  ___,  ___, VSI6,  0,  0x42, "I64Const", "i64.const")
mkOp(F32,  ___,  ___, VF32,  0,  0x43, "F32Const", "f32.const")
mkOp(F64,  ___,  ___, VF64,  0,  0x44, "F64Const", "f64.const")
mkOp(I32,  I32,  ___, NONE,  0,  0x45, "I32Eqz", "i32.eqz")
mkOp(I32,  I32,  I32, NONE,  0,  0x46, "I32Eq", "i32.eq")
mkOp(I32,  I32,  I32, NONE,  0,  0x47, "I32Ne", "i32.ne")
mkOp(I32,  I32,  I32, NONE,  0,  0x48, "I32LtS", "i32.lt_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x49, "I32LtU", "i32.lt_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x4a, "I32GtS", "i32.gt_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x4b, "I32GtU", "i32.gt_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x4c, "I32LeS", "i32.le_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x4d, "I32LeU", "i32.le_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x4e, "I32GeS", "i32.ge_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x4f, "I32GeU", "i32.ge_u")
mkOp(I32,  I64,  ___, NONE,  0,  0x50, "I64Eqz", "i64.eqz")
mkOp(I32,  I64,  I64, NONE,  0,  0x51, "I64Eq", "i64.eq")
mkOp(I32,  I64,  I64, NONE,  0,  0x52, "I64Ne", "i64.ne")
mkOp(I32,  I64,  I64, NONE,  0,  0x53, "I64LtS", "i64.lt_s")
mkOp(I32,  I64,  I64, NONE,  0,  0x54, "I64LtU", "i64.lt_u")
mkOp(I32,  I64,  I64, NONE,  0,  0x55, "I64GtS", "i64.gt_s")
mkOp(I32,  I64,  I64, NONE,  0,  0x56, "I64GtU", "i64.gt_u")
mkOp(I32,  I64,  I64, NONE,  0,  0x57, "I64LeS", "i64.le_s")
mkOp(I32,  I64,  I64, NONE,  0,  0x58, "I64LeU", "i64.le_u")
mkOp(I32,  I64,  I64, NONE,  0,  0x59, "I64GeS", "i64.ge_s")
mkOp(I32,  I64,  I64, NONE,  0,  0x5a, "I64GeU", "i64.ge_u")
mkOp(I32,  F32,  F32, NONE,  0,  0x5b, "F32Eq", "f32.eq")
mkOp(I32,  F32,  F32, NONE,  0,  0x5c, "F32Ne", "f32.ne")
mkOp(I32,  F32,  F32, NONE,  0,  0x5d, "F32Lt", "f32.lt")
mkOp(I32,  F32,  F32, NONE,  0,  0x5e, "F32Gt", "f32.gt")
mkOp(I32,  F32,  F32, NONE,  0,  0x5f, "F32Le", "f32.le")
mkOp(I32,  F32,  F32, NONE,  0,  0x60, "F32Ge", "f32.ge")
mkOp(I32,  F64,  F64, NONE,  0,  0x61, "F64Eq", "f64.eq")
mkOp(I32,  F64,  F64, NONE,  0,  0x62, "F64Ne", "f64.ne")
mkOp(I32,  F64,  F64, NONE,  0,  0x63, "F64Lt", "f64.lt")
mkOp(I32,  F64,  F64, NONE,  0,  0x64, "F64Gt", "f64.gt")
mkOp(I32,  F64,  F64, NONE,  0,  0x65, "F64Le", "f64.le")
mkOp(I32,  F64,  F64, NONE,  0,  0x66, "F64Ge", "f64.ge")
mkOp(I32,  I32,  ___, NONE,  0,  0x67, "I32Clz", "i32.clz")
mkOp(I32,  I32,  ___, NONE,  0,  0x68, "I32Ctz", "i32.ctz")
mkOp(I32,  I32,  ___, NONE,  0,  0x69, "I32Popcnt", "i32.popcnt")
mkOp(I32,  I32,  I32, NONE,  0,  0x6a, "I32Add", "i32.add")
mkOp(I32,  I32,  I32, NONE,  0,  0x6b, "I32Sub", "i32.sub")
mkOp(I32,  I32,  I32, NONE,  0,  0x6c, "I32Mul", "i32.mul")
mkOp(I32,  I32,  I32, NONE,  0,  0x6d, "I32DivS", "i32.div_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x6e, "I32DivU", "i32.div_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x6f, "I32RemS", "i32.rem_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x70, "I32RemU", "i32.rem_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x71, "I32And", "i32.and")
mkOp(I32,  I32,  I32, NONE,  0,  0x72, "I32Or", "i32.or")
mkOp(I32,  I32,  I32, NONE,  0,  0x73, "I32Xor", "i32.xor")
mkOp(I32,  I32,  I32, NONE,  0,  0x74, "I32Shl", "i32.shl")
mkOp(I32,  I32,  I32, NONE,  0,  0x75, "I32ShrS", "i32.shr_s")
mkOp(I32,  I32,  I32, NONE,  0,  0x76, "I32ShrU", "i32.shr_u")
mkOp(I32,  I32,  I32, NONE,  0,  0x77, "I32Rotl", "i32.rotl")
mkOp(I32,  I32,  I32, NONE,  0,  0x78, "I32Rotr", "i32.rotr")
mkOp(I64,  I64,  ___, NONE,  0,  0x79, "I64Clz", "i64.clz")
mkOp(I64,  I64,  ___, NONE,  0,  0x7a, "I64Ctz", "i64.ctz")
mkOp(I64,  I64,  ___, NONE,  0,  0x7b, "I64Popcnt", "i64.popcnt")
mkOp(I64,  I64,  I64, NONE,  0,  0x7c, "I64Add", "i64.add")
mkOp(I64,  I64,  I64, NONE,  0,  0x7d, "I64Sub", "i64.sub")
mkOp(I64,  I64,  I64, NONE,  0,  0x7e, "I64Mul", "i64.mul")
mkOp(I64,  I64,  I64, NONE,  0,  0x7f, "I64DivS", "i64.div_s")
mkOp(I64,  I64,  I64, NONE,  0,  0x80, "I64DivU", "i64.div_u")
mkOp(I64,  I64,  I64, NONE,  0,  0x81, "I64RemS", "i64.rem_s")
mkOp(I64,  I64,  I64, NONE,  0,  0x82, "I64RemU", "i64.rem_u")
mkOp(I64,  I64,  I64, NONE,  0,  0x83, "I64And", "i64.and")
mkOp(I64,  I64,  I64, NONE,  0,  0x84, "I64Or", "i64.or")
mkOp(I64,  I64,  I64, NONE,  0,  0x85, "I64Xor", "i64.xor")
mkOp(I64,  I64,  I64, NONE,  0,  0x86, "I64Shl", "i64.shl")
mkOp(I64,  I64,  I64, NONE,  0,  0x87, "I64ShrS", "i64.shr_s")
mkOp(I64,  I64,  I64, NONE,  0,  0x88, "I64ShrU", "i64.shr_u")
mkOp(I64,  I64,  I64, NONE,  0,  0x89, "I64Rotl", "i64.rotl")
mkOp(I64,  I64,  I64, NONE,  0,  0x8a, "I64Rotr", "i64.rotr")
mkOp(F32,  F32,  F32, NONE,  0,  0x8b, "F32Abs", "f32.abs")
mkOp(F32,  F32,  F32, NONE,  0,  0x8c, "F32Neg", "f32.neg")
mkOp(F32,  F32,  F32, NONE,  0,  0x8d, "F32Ceil", "f32.ceil")
mkOp(F32,  F32,  F32, NONE,  0,  0x8e, "F32Floor", "f32.floor")
mkOp(F32,  F32,  F32, NONE,  0,  0x8f, "F32Trunc", "f32.trunc")
mkOp(F32,  F32,  F32, NONE,  0,  0x90, "F32Nearest", "f32.nearest")
mkOp(F32,  F32,  F32, NONE,  0,  0x91, "F32Sqrt", "f32.sqrt")
mkOp(F32,  F32,  F32, NONE,  0,  0x92, "F32Add", "f32.add")
mkOp(F32,  F32,  F32, NONE,  0,  0x93, "F32Sub", "f32.sub")
mkOp(F32,  F32,  F32, NONE,  0,  0x94, "F32Mul", "f32.mul")
mkOp(F32,  F32,  F32, NONE,  0,  0x95, "F32Div", "f32.div")
mkOp(F32,  F32,  F32, NONE,  0,  0x96, "F32Min", "f32.min")
mkOp(F32,  F32,  F32, NONE,  0,  0x97, "F32Max", "f32.max")
mkOp(F32,  F32,  F32, NONE,  0,  0x98, "F32Copysign", "f32.copysign")
mkOp(F64,  F64,  F64, NONE,  0,  0x99, "F64Abs", "f64.abs")
mkOp(F64,  F64,  F64, NONE,  0,  0x9a, "F64Neg", "f64.neg")
mkOp(F64,  F64,  F64, NONE,  0,  0x9b, "F64Ceil", "f64.ceil")
mkOp(F64,  F64,  F64, NONE,  0,  0x9c, "F64Floor", "f64.floor")
mkOp(F64,  F64,  F64, NONE,  0,  0x9d, "F64Trunc", "f64.trunc")
mkOp(F64,  F64,  F64, NONE,  0,  0x9e, "F64Nearest", "f64.nearest")
mkOp(F64,  F64,  F64, NONE,  0,  0x9f, "F64Sqrt", "f64.sqrt")
mkOp(F64,  F64,  F64, NONE,  0,  0xa0, "F64Add", "f64.add")
mkOp(F64,  F64,  F64, NONE,  0,  0xa1, "F64Sub", "f64.sub")
mkOp(F64,  F64,  F64, NONE,  0,  0xa2, "F64Mul", "f64.mul")
mkOp(F64,  F64,  F64, NONE,  0,  0xa3, "F64Div", "f64.div")
mkOp(F64,  F64,  F64, NONE,  0,  0xa4, "F64Min", "f64.min")
mkOp(F64,  F64,  F64, NONE,  0,  0xa5, "F64Max", "f64.max")
mkOp(F64,  F64,  F64, NONE,  0,  0xa6, "F64Copysign", "f64.copysign")
mkOp(I32,  I64,  ___, NONE,  0,  0xa7, "I32WrapI64", "i32.wrap/i64")
mkOp(I32,  F32,  ___, NONE,  0,  0xa8, "I32TruncSF32", "i32.trunc_s/f32")
mkOp(I32,  F32,  ___, NONE,  0,  0xa9, "I32TruncUF32", "i32.trunc_u/f32")
mkOp(I32,  F64,  ___, NONE,  0,  0xaa, "I32TruncSF64", "i32.trunc_s/f64")
mkOp(I32,  F64,  ___, NONE,  0,  0xab, "I32TruncUF64", "i32.trunc_u/f64")
mkOp(I64,  I32,  ___, NONE,  0,  0xac, "I64ExtendSI32", "i64.extend_s/i32")
mkOp(I64,  I32,  ___, NONE,  0,  0xad, "I64ExtendUI32", "i64.extend_u/i32")
mkOp(I64,  F32,  ___, NONE,  0,  0xae, "I64TruncSF32", "i64.trunc_s/f32")
mkOp(I64,  F32,  ___, NONE,  0,  0xaf, "I64TruncUF32", "i64.trunc_u/f32")
mkOp(I64,  F64,  ___, NONE,  0,  0xb0, "I64TruncSF64", "i64.trunc_s/f64")
mkOp(I64,  F64,  ___, NONE,  0,  0xb1, "I64TruncUF64", "i64.trunc_u/f64")
mkOp(F32,  I32,  ___, NONE,  0,  0xb2, "F32ConvertSI32", "f32.convert_s/i32")
mkOp(F32,  I32,  ___, NONE,  0,  0xb3, "F32ConvertUI32", "f32.convert_u/i32")
mkOp(F32,  I64,  ___, NONE,  0,  0xb4, "F32ConvertSI64", "f32.convert_s/i64")
mkOp(F32,  I64,  ___, NONE,  0,  0xb5, "F32ConvertUI64", "f32.convert_u/i64")
mkOp(F32,  F64,  ___, NONE,  0,  0xb6, "F32DemoteF64", "f32.demote/f64")
mkOp(F64,  I32,  ___, NONE,  0,  0xb7, "F64ConvertSI32", "f64.convert_s/i32")
mkOp(F64,  I32,  ___, NONE,  0,  0xb8, "F64ConvertUI32", "f64.convert_u/i32")
mkOp(F64,  I64,  ___, NONE,  0,  0xb9, "F64ConvertSI64", "f64.convert_s/i64")
mkOp(F64,  I64,  ___, NONE,  0,  0xba, "F64ConvertUI64", "f64.convert_u/i64")
mkOp(F64,  F32,  ___, NONE,  0,  0xbb, "F64PromoteF32", "f64.promote/f32")
mkOp(I32,  F32,  ___, NONE,  0,  0xbc, "I32ReinterpretF32", "i32.reinterpret/f32")
mkOp(I64,  F64,  ___, NONE,  0,  0xbd, "I64ReinterpretF64", "i64.reinterpret/f64")
mkOp(F32,  I32,  ___, NONE,  0,  0xbe, "F32ReinterpretI32", "f32.reinterpret/i32")
mkOp(F64,  I64,  ___, NONE,  0,  0xbf, "F64ReinterpretI64", "f64.reinterpret/i64")

return {
  enum = opcodes,
  codes = codes
}
